name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
#  lint:
#    runs-on: ubuntu-latest
#    name: Lint and Code Quality
#    continue-on-error: true
#    defaults:
#      run:
#        working-directory: ./app
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up Python
#      uses: actions/setup-python@v5
#      with:
#        python-version: '3.11'
#
#    - name: Install Poetry
#      uses: snok/install-poetry@v1
#      with:
#        version: latest
#        virtualenvs-create: true
#        virtualenvs-in-project: true
#
#    - name: Load cached venv
#      id: cached-poetry-dependencies
#      uses: actions/cache@v4
#      with:
#        path: app/.venv
#        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('app/poetry.lock') }}
#
#    - name: Install dependencies
#      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      run: poetry install --no-interaction --no-root
#
#    - name: Install project
#      run: poetry install --no-interaction
#
#    - name: Run ruff linting
#      run: |
#        poetry run ruff check . --output-format=github
#      continue-on-error: false
#
#    - name: Run black formatting check
#      run: |
#        poetry run black --check --diff .
#      continue-on-error: true
#
#  test:
#    runs-on: ubuntu-latest
#    name: Tests
#    continue-on-error: true
#    defaults:
#      run:
#        working-directory: ./app
#
#    services:
#      postgres:
#        image: postgres:15-alpine
#        env:
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_USER: postgres
#          POSTGRES_DB: test_db
#          POSTGRES_HOST_AUTH_METHOD: trust
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - 5432:5432
#
#      redis:
#        image: redis:7-alpine
#        options: >-
#          --health-cmd "redis-cli ping"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - 6379:6379
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up Python
#      uses: actions/setup-python@v5
#      with:
#        python-version: '3.11'
#
#    - name: Install Poetry
#      uses: snok/install-poetry@v1
#      with:
#        version: latest
#        virtualenvs-create: true
#        virtualenvs-in-project: true
#
#    - name: Load cached venv
#      id: cached-poetry-dependencies
#      uses: actions/cache@v4
#      with:
#        path: app/.venv
#        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('app/poetry.lock') }}
#
#    - name: Install dependencies
#      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      run: poetry install --no-interaction --no-root
#
#    - name: Install project
#      run: poetry install --no-interaction
#
#    - name: Create .env file
#      run: |
#        mkdir -p config
#        cat > config/.env << EOF
#        SECRET_KEY=test-secret-key-for-ci
#        DEBUG=True
#        DJANGO_DATABASE_HOST=localhost
#        DJANGO_DATABASE_PORT=5432
#        DJANGO_DATABASE_NAME=test_db
#        DJANGO_DATABASE_USER=postgres
#        DJANGO_DATABASE_PASSWORD=postgres
#        REDIS_URL=redis://localhost:6379/0
#        CELERY_BROKER_URL=redis://localhost:6379/0
#        CELERY_RESULT_BACKEND=redis://localhost:6379/0
#        EOF
#
#    - name: Run Django checks
#      run: |
#        poetry run python manage.py check --fail-level WARNING
#      env:
#        DJANGO_SETTINGS_MODULE: server.settings
#
#    - name: Run Django migrations check
#      run: |
#        poetry run python manage.py makemigrations --dry-run --check
#      env:
#        DJANGO_SETTINGS_MODULE: server.settings
#
#    - name: Run tests
#      run: |
#        poetry run pytest --junitxml=pytest.xml --cov=server/apps --cov-report=term-missing:skip-covered --cov-report=xml
#      env:
#        DJANGO_SETTINGS_MODULE: server.settings
#      continue-on-error: true
#
#    - name: Upload test results
#      uses: actions/upload-artifact@v4
#      if: always()
#      with:
#        name: test-results
#        path: |
#          app/pytest.xml
#          app/coverage.xml

  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
#    needs: [lint, test]
    if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create .env file for build
      run: |
        mkdir -p app/config
        cat > app/config/.env << EOF
        SECRET_KEY=build-secret-key
        DEBUG=False
        DJANGO_DATABASE_HOST=db
        DJANGO_DATABASE_PORT=5432
        DJANGO_DATABASE_NAME=app_db
        DJANGO_DATABASE_USER=postgres
        DJANGO_DATABASE_PASSWORD=postgres
        REDIS_URL=redis://redis:6379/0
        CELERY_BROKER_URL=redis://redis:6379/0
        CELERY_RESULT_BACKEND=redis://redis:6379/0
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/django/Dockerfile
        target: production_build
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          DJANGO_ENV=production
          BUILD_ID=${{ github.run_number }}
          RELEASE=${{ github.sha }}

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build-and-push
    if: needs.build-and-push.result == 'success' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deployment to staging environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        # Здесь будет ваша логика деплоя
        # Например, обновление docker-compose на сервере через SSH

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: build-and-push
    if: needs.build-and-push.result == 'success' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deployment to production environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # Здесь будет ваша логика деплоя
