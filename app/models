
class Competency(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    name = models.CharField(
        verbose_name=_("Название"),
        help_text=_("Название компетенции в рамках игрового мира"),
        max_length=256,
        unique=True,
    )
    description = models.TextField(
        verbose_name=_("Описание"),
        help_text=_("Описание компетенции в рамках игрового мира"),
        blank=True,
    )
    required_experience = models.PositiveIntegerField(
        verbose_name=_("Требуемый опыт"),
        help_text=_(
            "Количество опыта, которое необходимо получить чтобы полностью "
            "изучить компетенцию и получить новую компетенцию"
        ),
    )
    icon = models.ImageField(
        verbose_name=_("Иконка"),
        upload_to="competencies",
        null=True,
        blank=True,
    )
    color = models.CharField(
        verbose_name=_("Цвет"),
        max_length=256,
        blank=True,
    )
    parent = models.ForeignKey(
        to="self",
        on_delete=models.CASCADE,
        verbose_name=_("Родительская компетенция"),
        help_text=_(
            "Родительская компетенция. Используется для указания уровней компетенций. "
            "Ссылается на компетенцию уровня ниже"
        ),
        related_name="children",
        db_index=True,
        null=True,
        blank=True,
    )
    game_world = models.ForeignKey(
        to="game_world.GameWorld",
        on_delete=models.CASCADE,
        verbose_name=_("Игровой мир"),
        help_text=_("Игровой мир в рамках которого создается компетенция"),
        related_name="competencies",
    )
    game_world_stories = GenericRelation(to="game_world.GameWorldStory")

    class Meta(AbstractBaseModel.Meta):
        verbose_name = _("Компетенция")
        verbose_name_plural = _("Компетенции")


class Rank(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    name = models.CharField(
        verbose_name=_("Название"),
        help_text=_("Название ранга в рамках игрового мира"),
        max_length=256,
        unique=True,
    )
    description = models.TextField(
        verbose_name=_("Описание"),
        help_text=_("Описание ранга в рамках игрового мира"),
        blank=True,
    )
    required_experience = models.PositiveIntegerField(
        verbose_name=_("Требуемый опыт"),
        help_text=_(
            "Количество опыта, которое необходимо получить чтобы полностью " "закрыть ранг и получить новый ранг"
        ),
    )
    icon = models.ImageField(
        verbose_name=_("Иконка"),
        upload_to="ranks",
        null=True,
        blank=True,
    )
    color = models.CharField(
        verbose_name=_("Цвет"),
        max_length=256,
        blank=True,
    )
    parent = models.ForeignKey(
        to="self",
        on_delete=models.CASCADE,
        verbose_name=_("Родительский ранг"),
        help_text=_(
            "Родительский ранг. Используется для указания уровня ранга. "
            "Ссылается на ранг уровня ниже. Ранги имеют линейный вид."
        ),
        related_name="children",
        db_index=True,
        null=True,
        blank=True,
    )
    game_world = models.ForeignKey(
        to="game_world.GameWorld",
        on_delete=models.CASCADE,
        verbose_name=_("Игровой мир"),
        help_text=_("Игровой мир в рамках которого создается ранг"),
        related_name="ranks",
    )
    game_world_stories = GenericRelation(to="game_world.GameWorldStory")

class RequiredRankCompetency(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    rank = models.ForeignKey(
        to="game_mechanics.Rank",
        verbose_name=_("Ранг"),
        help_text=_("Ранг, в рамках которого нужно получить определенные компетенции"),
        on_delete=models.CASCADE,
        related_name="required_rank_competencies",
    )
    competency = models.ForeignKey(
        to="game_mechanics.Competency",
        verbose_name=_("Компетенция"),
        help_text=_("Компетенция, которую нужно обязательно получить, чтобы повысить ранг"),
        on_delete=models.CASCADE,
        related_name="required_rank_competencies",
    )


class ActivityCategory(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    name = models.CharField(
        verbose_name=_("Название"),
        help_text=_("Название категории активности"),
        max_length=256,
    )
    description = models.TextField(
        verbose_name=_("Описание"),
        help_text=_("Описание категории активности"),
    )
    repeatability = models.PositiveIntegerField(
        verbose_name=_("Через сколько дней повторять активность"),
        help_text=_(
            "Количество дней, через которую данную категории активности стоит повторить. "
            "Используется в некоторых миссиях и событиях. "
            "Например: категория 'Еженедельная миссия', repeatability = 7"
        ),
        null=True,
        blank=True,
    )
    icon = models.ImageField(
        verbose_name=_("Иконка"),
        upload_to="mission_categories",
        null=True,
        blank=True,
    )
    color = models.CharField(
        verbose_name=_("Цвет"),
        max_length=256,
        blank=True,
    )


class Artifact(AbstractBaseModel):

    class Modifiers(models.TextChoices):
        """
        Модификатор.
        """

        DEFAULT = "DEFAULT", _("Стандартный")
        EXPERIENCE_GAIN = "EXPERIENCE_GAIN", _("Прирост опыта")
        CURRENCY_GAIN = "CURRENCY_GAIN", _("Прирост валюты")
        SHOP_DISCOUNT = "SHOP_DISCOUNT", _("Скидка в магазине")

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    name = models.CharField(
        verbose_name=_("Название"),
        help_text=_("Название артефакта"),
        max_length=256,
        unique=True,
    )
    description = models.TextField(
        verbose_name=_("Описание"),
        help_text=_("Описание артефакта"),
        blank=True,
    )
    icon = models.ImageField(
        verbose_name=_("Иконка"),
        upload_to="competencies",
        null=True,
        blank=True,
    )
    color = models.CharField(
        verbose_name=_("Цвет"),
        max_length=256,
        blank=True,
    )
    modifier = models.CharField(
        verbose_name=_("Модификатор"),
        help_text=_("Значение модификатора для артефакта. " "Только некоторые артефакты имеют модификатор"),
        max_length=20,
        choices=Modifiers.choices,
        default=Modifiers.DEFAULT,
    )
    modifier_value = models.PositiveIntegerField(
        verbose_name=_("Значение модификатора в %"),
        help_text=_(
            "Значение модификатора в %. На сколько увеличивается тот или иной показатель (обычно не больше 5 %)."
        ),
        validators=[MinValueValidator(0)],
    )
    game_world = models.ForeignKey(
        to="game_world.GameWorld",
        on_delete=models.CASCADE,
        verbose_name=_("Игровой мир"),
        help_text=_("Игровой мир в рамках которого создается артефакт"),
        related_name="artifacts",
    )
    game_world_stories = GenericRelation(to="game_world.GameWorldStory")



class Event(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    name = models.CharField(
        verbose_name=_("Название"),
        help_text=_("Название события"),
        max_length=256,
    )
    description = models.TextField(
        verbose_name=_("Описание"),
        help_text=_(
            "Описание события. " "Что должен сделать пользователей в рамках события с учетом трудовой деятельности"
        ),
    )
    experience = models.PositiveIntegerField(
        verbose_name=_("Награда в опыте"),
        help_text=_("Награда в опыте, которое получит персонаж по завершению события"),
        default=0,
    )
    currency = models.PositiveIntegerField(
        verbose_name=_("Награда в валюте"),
        help_text=_("Награда в валюте, которую получит персонаж по завершению события"),
        default=0,
    )
    icon = models.ImageField(
        verbose_name=_("Иконка"),
        upload_to="events",
        null=True,
        blank=True,
    )
    color = models.CharField(
        verbose_name=_("Цвет"),
        max_length=256,
        blank=True,
    )
    required_number = models.PositiveIntegerField(
        verbose_name=_("Обязательное количество выполненных событий для всех игроков"),
        help_text=_("Сколько персонажей должны посетить или закрыть это событие для общего успеха"),
    )
    is_active = models.BooleanField(
        verbose_name=_("Активно событие или нет"),
        help_text=_("Активно событие или нет"),
        default=True,
    )
    start_datetime = models.DateTimeField(
        verbose_name=_("Дата и время для запуска"),
        help_text=_(
            "Дата и время для запуска события. Используется для создания отложенных событий и "
            "должна сочетать с категорией."
        ),
        null=True,
        blank=True,
    )
    time_to_complete = models.PositiveIntegerField(
        verbose_name=_("Количество дней на успешное выполнение события"),
        help_text=_("Количество дней на успешное выполнение события"),
    )
    category = models.ForeignKey(
        to="game_world.ActivityCategory",
        verbose_name=_("Категория"),
        help_text=_("Категория события"),
        on_delete=models.CASCADE,
        related_name="events",
    )
    rank = models.ForeignKey(
        to="game_mechanics.Rank",
        verbose_name=_("Ранг события"),
        help_text=_("В рамках какого ранга это событие доступно для выполнения"),
        on_delete=models.PROTECT,
        related_name="events",
    )
    artifacts = models.ManyToManyField(
        to="game_world.Artifact",
        verbose_name=_("Артефакты"),
        help_text=_("Артефакты, которые может получить персонаж за успешное выполнение события"),
        through="game_world.EventArtifact",
        related_name="events",
        blank=True,
    )
    competencies = models.ManyToManyField(
        to="game_mechanics.Competency",
        verbose_name=_("Компетенции"),
        help_text=_("Компетенции, которые прокачиваются у персонажа за успешное выполнение события"),
        through="EventCompetency",
        related_name="events",
        blank=True,
    )
    mentor = models.ForeignKey(
        to="user.Character",
        verbose_name=_("Ментор"),
        on_delete=models.CASCADE,
        related_name="events_branches",
        null=True,
        blank=True,
        help_text=_("Ментор, который может помочь в выполнении события"),
    )
    game_world = models.ForeignKey(
        to="game_world.GameWorld",
        on_delete=models.CASCADE,
        verbose_name=_("Игровой мир"),
        help_text=_("Игровой мир в рамках которого создается событие"),
        related_name="events",
    )
    game_world_stories = GenericRelation(to="game_world.GameWorldStory")




class EventArtifact(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    event = models.ForeignKey(
        to="game_world.Event",
        verbose_name=_("Событие"),
        help_text=_("Событие персонажа за успешное выполнение которого он сможет получить артефакт"),
        on_delete=models.CASCADE,
        related_name="event_artifacts",
    )
    artifact = models.ForeignKey(
        to="game_world.Artifact",
        verbose_name=_("Артефакт"),
        help_text=_("Артефакт, который получает персонаж по успешному завершению события"),
        on_delete=models.CASCADE,
        related_name="event_artifacts",
    )


class EventCompetency(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    event = models.ForeignKey(
        to="game_world.Event",
        verbose_name=_("Событие"),
        help_text=_("Событие персонажа за успешное выполнение которого он прокачивает компетенцию"),
        on_delete=models.CASCADE,
        related_name="event_competencies",
    )
    competency = models.ForeignKey(
        to="game_mechanics.Competency",
        verbose_name=_("Компетенция"),
        help_text=_("Компетенция, которую прокачивает персонаж по успешному завершению события"),
        on_delete=models.CASCADE,
        related_name="event_competencies",
    )
    experience = models.PositiveIntegerField(
        verbose_name=_("Опыт"),
        default=1,
        help_text=_("Сколько получит опыта компетенции за успешное прохождение события"),
    )



class GameWorld(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    name = models.CharField(
        verbose_name=_("Название"),
        help_text=_("Название игрового мира"),
        max_length=256,
        unique=True,
    )
    description = models.TextField(
        verbose_name=_("Описание"),
        help_text=_("Описание игрового мира"),
    )
    color = models.CharField(
        verbose_name=_("Цвет"),
        max_length=256,
    )
    standard_experience = models.PositiveIntegerField(
        verbose_name=_("Стандартный размер опыта, начисляемый за очень простую миссию"),
        help_text=_("Стандартный размер опыта, начисляемый за очень простую миссию"),
    )
    standard_currency = models.PositiveIntegerField(
        verbose_name=_("Стандартный размер валюты, начисляемый за очень простую миссию"),
        help_text=_("Стандартный размер валюты, начисляемый за очень простую миссию"),
    )
    currency_name = models.CharField(
        verbose_name=_("Название валюты"),
        help_text=_("Название валюты"),
    )


class GameWorldStory(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    image = models.ImageField(
        verbose_name=_("Изображение"),
        upload_to="history_game_worlds",
        null=True,
        blank=True,
    )
    text = models.TextField(
        verbose_name=_("Текст"),
        help_text=_("Описание истории, лора"),
    )
    game_world = models.ForeignKey(
        to="game_world.GameWorld",
        on_delete=models.CASCADE,
        verbose_name=_("Игровой мир"),
        help_text=_("Игровой мир в рамках которого создается история, особенности и описание его предметов и механик"),
        related_name="game_world_stories",
    )
    content_type = models.ForeignKey(
        to="contenttypes.ContentType",
        verbose_name=_("Тип содержимого"),
        help_text=_("Тип содержимого"),
        on_delete=models.CASCADE,
        db_index=True,
    )
    object_id = models.PositiveIntegerField(
        verbose_name=_("Id объекта"),
        help_text=_("Id объекта"),
    )
    content_object = GenericForeignKey(
        ct_field="content_type",
        fk_field="object_id",
    )





class Mission(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    name = models.CharField(
        verbose_name=_("Название"),
        help_text=_("Название миссии"),
        max_length=256,
    )
    description = models.TextField(
        verbose_name=_("Описание миссии"),
        help_text=_(
            "Описание миссии. " "Что должен сделать пользователей в рамках миссии с учетом трудовой деятельности",
        ),
    )
    experience = models.PositiveIntegerField(
        verbose_name=_("Награда в опыте"),
        help_text=_("Награда в опыте, которое получит персонаж по завершению миссии"),
        default=0,
    )
    currency = models.PositiveIntegerField(
        verbose_name=_("Награда в валюте"),
        help_text=_("Награда в валюте, которую получит персонаж по завершению миссии"),
        default=0,
    )
    icon = models.ImageField(
        verbose_name=_("Иконка"),
        upload_to="events",
        null=True,
        blank=True,
    )
    color = models.CharField(
        verbose_name=_("Цвет"),
        max_length=256,
        blank=True,
    )
    order = models.IntegerField(
        verbose_name=_("Порядок в ветке"),
        help_text=_("Порядок в ветке"),
        default=1,
    )
    is_key_mission = models.BooleanField(
        verbose_name=_("Ключевая миссия или нет"),
        help_text=_("Является ли миссия обязательной чтобы получить новый ранг"),
        default=False,
    )
    is_active = models.BooleanField(
        verbose_name=_("Активная миссия или нет"),
        help_text=_("Активная миссия или нет"),
        default=True,
    )
    time_to_complete = models.PositiveIntegerField(
        verbose_name=_("Количество дней на успешное выполнение миссии"),
        help_text=_("Количество дней на успешное выполнение миссии"),
        null=True,
        blank=True,
    )
    branch = models.ForeignKey(
        to="game_world.MissionBranch",
        verbose_name=_("Ветка"),
        help_text=_("Ветка миссии"),
        on_delete=models.CASCADE,
        related_name="missions",
    )
    level = models.ForeignKey(
        to="game_world.MissionLevel",
        on_delete=models.CASCADE,
        verbose_name=_("Уровень"),
        related_name="missions",
    )
    category = models.ForeignKey(
        to="game_world.ActivityCategory",
        verbose_name=_("Категория"),
        help_text=_("Категория ветки миссии"),
        on_delete=models.CASCADE,
        related_name="missions",
    )
    mentor = models.ForeignKey(
        to="user.Character",
        verbose_name=_("Ментор"),
        on_delete=models.CASCADE,
        related_name="mission_mentors",
        null=True,
        blank=True,
        help_text=_("Ментор, который может помочь в выполнении миссии"),
    )
    required_missions = models.ManyToManyField(
        to="self",
        verbose_name=_("Необходимые миссии"),
        symmetrical=False,
        related_name="unlocks_missions",
        blank=True,
        help_text=_("Миссии, которые нужно выполнить для доступа к этой миссии"),
    )
    artifacts = models.ManyToManyField(
        to="game_world.Artifact",
        verbose_name=_("Артефакты"),
        help_text=_("Артефакты, которые может получить персонаж за успешное выполнение миссии"),
        through="game_world.MissionArtifact",
        related_name="missions",
        blank=True,
    )
    competencies = models.ManyToManyField(
        to="game_mechanics.Competency",
        verbose_name=_("Компетенции миссии"),
        help_text=_("Компетенции, которые прокачиваются у персонажа за успешное выполнение миссии"),
        through="game_world.MissionCompetency",
        related_name="missions",
        blank=True,
    )
    game_world = models.ForeignKey(
        to="game_world.GameWorld",
        on_delete=models.CASCADE,
        verbose_name=_("Игровой мир"),
        help_text=_("Игровой мир в рамках которого создается миссия"),
        related_name="missions",
    )
    game_world_stories = GenericRelation(to="game_world.GameWorldStory")


class MissionArtifact(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    mission = models.ForeignKey(
        to="game_world.Mission",
        verbose_name=_("Миссия"),
        help_text=_("Миссия персонажа за успешное выполнение которого он сможет получить артефакт"),
        on_delete=models.CASCADE,
        related_name="mission_artifacts",
    )
    artifact = models.ForeignKey(
        to="game_world.Artifact",
        verbose_name=_("Артефакт"),
        help_text=_("Артефакт, который получает персонаж по успешному завершению миссии"),
        on_delete=models.CASCADE,
        related_name="mission_artifacts",
    )



class MissionBranch(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    name = models.CharField(
        verbose_name=_("Название"),
        help_text=_("Название ветки миссий"),
        max_length=256,
    )
    description = models.TextField(
        verbose_name=_("Описание"),
        help_text=_(
            "Описание ветки миссий. "
            "Что должен сделать пользователей в рамках ветки миссий с учетом трудовой деятельности"
        ),
        blank=True,
    )
    icon = models.ImageField(
        verbose_name=_("Иконка"),
        upload_to="mission_branches",
        null=True,
        blank=True,
    )
    color = models.CharField(
        verbose_name=_("Цвет"),
        max_length=256,
        blank=True,
    )
    is_active = models.BooleanField(
        verbose_name=_("Активная ветка миссий или нет"),
        help_text=_("Активная ветка миссий или нет"),
        default=True,
    )
    start_datetime = models.DateTimeField(
        verbose_name=_("Дата и время для запуска"),
        help_text=_(
            "Дата и время для запуска ветки событий. Используется для создания отложенных веток и "
            "должна сочетать с категорией."
        ),
        null=True,
        blank=True,
    )
    time_to_complete = models.PositiveIntegerField(
        verbose_name=_("Количество дней на успешное выполнение миссии"),
        help_text=_("Количество дней на успешное выполнение ветки миссиий"),
        null=True,
        blank=True,
    )
    rank = models.ForeignKey(
        to="game_mechanics.Rank",
        verbose_name=_("Ранг ветки миссий"),
        on_delete=models.PROTECT,
        related_name="mission_branches",
        help_text=_("В рамках какого ранга эта ветка событий доступно для выполнения"),
    )
    category = models.ForeignKey(
        to="game_world.ActivityCategory",
        verbose_name=_("Категория"),
        help_text=_("Категория ветки миссии"),
        on_delete=models.CASCADE,
        related_name="mission_branches",
    )
    mentor = models.ForeignKey(
        to="user.Character",
        verbose_name=_("Ментор"),
        on_delete=models.CASCADE,
        related_name="mission_branch_mentors",
        null=True,
        blank=True,
        help_text=_("Ментор, который может помочь в выполнении ветки миссий"),
    )
    game_world = models.ForeignKey(
        to="game_world.GameWorld",
        on_delete=models.CASCADE,
        verbose_name=_("Игровой мир"),
        help_text=_("Игровой мир в рамках которого создается ветка миссий"),
        related_name="mission_branches",
    )


class MissionCompetency(AbstractBaseModel):


    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    mission = models.ForeignKey(
        to="game_world.Mission",
        verbose_name=_("Миссия"),
        help_text=_("Миссия персонажа за успешное выполнение которого он прокачивает компетенцию"),
        on_delete=models.CASCADE,
        related_name="mission_competencies",
    )
    competency = models.ForeignKey(
        to="game_mechanics.Competency",
        verbose_name=_("Компетенция"),
        help_text=_("Компетенция, которую прокачивает персонаж по успешному завершению миссии"),
        on_delete=models.CASCADE,
        related_name="mission_competencies",
    )
    experience = models.PositiveIntegerField(
        verbose_name=_("Опыт"),
        default=1,
        help_text=_("Сколько получит опыта компетенции за успешное прохождение миссии"),
    )



class MissionLevel(AbstractBaseModel):

    uuid = models.UUIDField(
        verbose_name=_("UUID"),
        help_text=_("Используется при генерации объектов через для понимания новый объект или старый"),
        default=uuid4,
        unique=True,
    )
    name = models.CharField(
        verbose_name=_("Название"),
        help_text=_("Название уровня миссии"),
        max_length=256,
    )
    description = models.TextField(
        verbose_name=_("Описание"),
        help_text=_("Описание уровня миссии"),
        blank=True,
    )
    icon = models.ImageField(
        verbose_name=_("Иконка"),
        upload_to="mission_levels",
        null=True,
        blank=True,
    )
    color = models.CharField(
        verbose_name=_("Цвет"),
        max_length=256,
        blank=True,
    )
    multiplier_experience = models.PositiveIntegerField(
        verbose_name=_("Множитель опыта от стандартного, в %"),
        help_text=_(
            "Множитель опыта от стандартного, в %. "
            "На сколько процентов увеличивается стандартный размер опыта исходя из сложности миссии"
        ),
    )
    multiplier_currency = models.PositiveIntegerField(
        verbose_name=_("Множитель валюты от стандартного, в %"),
        help_text=_(
            "Множитель валюты от стандартного, в %. "
            "На сколько процентов увеличивается стандартный размер валюты исходя из сложности миссии"
        ),
    )
