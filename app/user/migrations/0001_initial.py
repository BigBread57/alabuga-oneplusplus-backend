# Generated by Django 5.2.6 on 2025-10-02 14:10

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import user.models.user
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("game_mechanics", "0002_initial"),
        ("game_world", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("uuid", models.UUIDField(default=uuid.uuid4, help_text="UUID", unique=True, verbose_name="UUID")),
                ("middle_name", models.CharField(blank=True, max_length=50, verbose_name="Отчество")),
                ("email", models.EmailField(max_length=254, unique=True, verbose_name="Электронная почта")),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, region=None, verbose_name="Номер телефона"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
                "ordering": ("-id",),
            },
            managers=[
                ("objects", user.models.user.DefaultUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Character",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Дата и время создания объекта")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата и время изменения объекта")),
                ("uuid", models.UUIDField(default=uuid.uuid4, help_text="UUID", unique=True, verbose_name="UUID")),
                ("avatar", models.ImageField(blank=True, null=True, upload_to="avatars", verbose_name="Аватар")),
                ("currency", models.PositiveIntegerField(default=0, verbose_name="Валюта")),
                ("experience", models.PositiveIntegerField(default=0, verbose_name="Опыт")),
                ("is_active", models.BooleanField(default=True, verbose_name="Активный персонаж или нет")),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("CANDIDATE", "Кандидат"),
                            ("EMPLOYEE", "Сотрудник"),
                            ("MANAGER", "Менеджер"),
                            ("CONTENT_MANAGER", "Контент-менеджер"),
                            ("HR", "HR"),
                            ("ORGANIZER", "Организатор"),
                            ("ADMIN", "Администратор"),
                        ],
                        default="CANDIDATE",
                        max_length=20,
                        verbose_name="Роль",
                    ),
                ),
                (
                    "game_world",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="characters",
                        to="game_world.gameworld",
                        verbose_name="Игровой мир",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="characters",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Персонаж",
                "verbose_name_plural": "Персонаж",
                "ordering": ("-id",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CharacterArtifact",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Дата и время создания объекта")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата и время изменения объекта")),
                ("uuid", models.UUIDField(default=uuid.uuid4, help_text="UUID", unique=True, verbose_name="UUID")),
                (
                    "artifact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_artifacts",
                        to="game_world.artifact",
                        verbose_name="Артефакт",
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_artifacts",
                        to="user.character",
                        verbose_name="Персонаж",
                    ),
                ),
            ],
            options={
                "verbose_name": "Артефакт персонажа",
                "verbose_name_plural": "Артефакты персонажей",
                "ordering": ("-id",),
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="character",
            name="artifacts",
            field=models.ManyToManyField(
                blank=True,
                related_name="characters",
                through="user.CharacterArtifact",
                to="game_world.artifact",
                verbose_name="Артефакты",
            ),
        ),
        migrations.CreateModel(
            name="CharacterCompetency",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Дата и время создания объекта")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата и время изменения объекта")),
                ("uuid", models.UUIDField(default=uuid.uuid4, help_text="UUID", unique=True, verbose_name="UUID")),
                ("experience", models.PositiveIntegerField(default=0, verbose_name="Опыт")),
                ("is_received", models.BooleanField(default=False, verbose_name="Получена компетенция или нет")),
                (
                    "received_datetime",
                    models.DateTimeField(blank=True, null=True, verbose_name="Дата и время получения"),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_competencies",
                        to="user.character",
                        verbose_name="Персонаж",
                    ),
                ),
                (
                    "competency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_competencies",
                        to="game_mechanics.competency",
                        verbose_name="Компетенция",
                    ),
                ),
            ],
            options={
                "verbose_name": "Компетенция персонажа",
                "verbose_name_plural": "Компетенции персонажей",
                "ordering": ("-id",),
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="character",
            name="competencies",
            field=models.ManyToManyField(
                blank=True,
                related_name="characters",
                through="user.CharacterCompetency",
                to="game_mechanics.competency",
                verbose_name="Компетенции",
            ),
        ),
        migrations.CreateModel(
            name="CharacterEvent",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Дата и время создания объекта")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата и время изменения объекта")),
                ("uuid", models.UUIDField(default=uuid.uuid4, help_text="UUID", unique=True, verbose_name="UUID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "В процессе"),
                            ("COMPLETED", "Завершена"),
                            ("NEED_IMPROVEMENT", "Требует доработки"),
                            ("PENDING_REVIEW", "На проверке"),
                            ("FAILED", "Провалена"),
                        ],
                        default="IN_PROGRESS",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "start_datetime",
                    models.DateTimeField(blank=True, null=True, verbose_name="Дата и время, когда задача получена"),
                ),
                (
                    "end_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Крайняя дата и время задачи, когда она должна быть выполнена",
                    ),
                ),
                ("result", models.TextField(blank=True, verbose_name="Результат выполнения события")),
                ("inspector_comment", models.TextField(blank=True, verbose_name="Комментарий проверяющего")),
                (
                    "final_status_datetime",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Дата и время проставления конечного статуса"
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_events",
                        to="user.character",
                        verbose_name="Персонаж",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_events",
                        to="game_world.event",
                        verbose_name="Событие",
                    ),
                ),
                (
                    "inspector",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="character_event_inspectors",
                        to="user.character",
                        verbose_name="Проверяющий",
                    ),
                ),
                (
                    "mentor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Ментор, который может помочь в выполнении миссии",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_event_mentors",
                        to="user.character",
                        verbose_name="Ментор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Событие персонажа",
                "verbose_name_plural": "События персонажей",
                "ordering": ("-id",),
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="character",
            name="events",
            field=models.ManyToManyField(
                blank=True,
                related_name="characters",
                through="user.CharacterEvent",
                through_fields=("character", "event"),
                to="game_world.event",
                verbose_name="События",
            ),
        ),
        migrations.CreateModel(
            name="CharacterMission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Дата и время создания объекта")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата и время изменения объекта")),
                ("uuid", models.UUIDField(default=uuid.uuid4, help_text="UUID", unique=True, verbose_name="UUID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "В процессе"),
                            ("COMPLETED", "Завершена"),
                            ("NEED_IMPROVEMENT", "Требует доработки"),
                            ("PENDING_REVIEW", "На проверке"),
                            ("FAILED", "Провалена"),
                        ],
                        default="IN_PROGRESS",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "start_datetime",
                    models.DateTimeField(blank=True, null=True, verbose_name="Дата и время, когда задача получена"),
                ),
                (
                    "end_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Крайняя дата и время задачи, когда она должна быть выполнена",
                    ),
                ),
                ("result", models.TextField(blank=True, verbose_name="Результат выполнения миссии")),
                ("inspector_comment", models.TextField(blank=True, verbose_name="Комментарий проверяющего")),
                (
                    "final_status_datetime",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Дата и время проставления конечного статуса"
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_missions",
                        to="user.character",
                        verbose_name="Персонаж",
                    ),
                ),
                (
                    "inspector",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="character_mission_inspectors",
                        to="user.character",
                        verbose_name="Проверяющий",
                    ),
                ),
                (
                    "mentor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Ментор, который может помочь в выполнении миссии",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_mission_mentors",
                        to="user.character",
                        verbose_name="Ментор",
                    ),
                ),
                (
                    "mission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_missions",
                        to="game_world.mission",
                        verbose_name="Миссия",
                    ),
                ),
            ],
            options={
                "verbose_name": "Миссия персонажа",
                "verbose_name_plural": "Миссии персонажей",
                "ordering": ("-id",),
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="character",
            name="missions",
            field=models.ManyToManyField(
                blank=True,
                related_name="characters",
                through="user.CharacterMission",
                through_fields=("character", "mission"),
                to="game_world.mission",
                verbose_name="Миссии",
            ),
        ),
        migrations.CreateModel(
            name="CharacterMissionBranch",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Дата и время создания объекта")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата и время изменения объекта")),
                ("uuid", models.UUIDField(default=uuid.uuid4, help_text="UUID", unique=True, verbose_name="UUID")),
                (
                    "start_datetime",
                    models.DateTimeField(blank=True, null=True, verbose_name="Дата и время, когда задача получена"),
                ),
                (
                    "end_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Крайняя дата и время задачи, когда она должна быть выполнена",
                    ),
                ),
                (
                    "branch",
                    models.ForeignKey(
                        help_text="Ветка миссии",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_mission_branches",
                        to="game_world.missionbranch",
                        verbose_name="Ветка",
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_mission_branches",
                        to="user.character",
                        verbose_name="Персонаж",
                    ),
                ),
                (
                    "mentor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Ментор, который может помочь в выполнении ветки миссий",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_mission_branch_mentors",
                        to="user.character",
                        verbose_name="Ментор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Миссия персонажа",
                "verbose_name_plural": "Миссии персонажей",
                "ordering": ("-id",),
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="charactermission",
            name="branch",
            field=models.ForeignKey(
                help_text="Ветка миссии",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="character_missions",
                to="user.charactermissionbranch",
                verbose_name="Ветка",
            ),
        ),
        migrations.CreateModel(
            name="CharacterRank",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Дата и время создания объекта")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата и время изменения объекта")),
                ("uuid", models.UUIDField(default=uuid.uuid4, help_text="UUID", unique=True, verbose_name="UUID")),
                ("experience", models.PositiveIntegerField(default=0, verbose_name="Опыт")),
                ("is_received", models.BooleanField(default=False, verbose_name="Получен ранг или нет")),
                (
                    "received_datetime",
                    models.DateTimeField(blank=True, null=True, verbose_name="Дата и время получения"),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_ranks",
                        to="user.character",
                        verbose_name="Персонаж",
                    ),
                ),
                (
                    "rank",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_ranks",
                        to="game_mechanics.rank",
                        verbose_name="Ранг",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ранг персонажа",
                "verbose_name_plural": "Ранги персонажей",
                "ordering": ("-id",),
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="character",
            name="ranks",
            field=models.ManyToManyField(
                blank=True,
                related_name="characters",
                through="user.CharacterRank",
                to="game_mechanics.rank",
                verbose_name="Ранг",
            ),
        ),
    ]
